from greg onufer subject re let build software cryptophone for over the internet in graham toal gtoal write in article hal hal finney write i try thi code yesterday on my sparcstation elc it take over second to compres second worth of speech thi mean that it need to be optimize by over a factor of before it will be usable in even a half-duplex mode ouch thank for try it the follow program be a very quick hack i create a few month ago to determine whether a sun sparcstation ipc could perform real-time full-duplex encrypt audio with result datum rate sustainable by today modem thi test program read linearly-encoded audio from the audio device compress it with gsm compress frame of sample record at into bite result in a hz frame rate encrypt it with de then reverse the proces and send the reconstruct audio back to the audio device the compress encrypt audio stream be my sparcstation ipc not exactly a very fast machine these day certainly slower than an elc would just barely sustain thi activity audio underrun would occcur but the speech wa very intelligible i run it a a real-time proces to get the best result remember though that thi program be a quick hack and the performance can certainly be improve the audio compression routine can be ftp from i believe look for gsm or toast i use eric young de implementation but i no longer know where i get it from cheer greg cut here test program to see how much cpu it take for secure digital audio written by g onufer greg written on a sun ipc run solari with a sun isdn s-bu card and a speakerbox include include include include include include include include include int fd info if null if ioctl fd perror return info if ioctl fd info perror return if ioctl fd flushrw perror return info if ioctl fd info perror return return int ifd gsm handle buf sample if read ifd sample sizeof sample sizeof sample fprintf stderr short return handle sample buf return int ofd gsm handle buf sample if handle buf sample fprintf stderr return if write ofd sample sizeof sample sizeof sample fprintf stderr short return return main gsm handle frame int audiofd int option key audiofd open if audiofd perror open exit initialize gsm compression code if handle null fprintf stderr sv exit option if handle option fprintf stderr sv fast exit initialize de code key if key fprintf stderr sv exit if key fprintf stderr sv exit memset sizeof memset sizeof open audio device and configure it if audiofd null exit for get sample linear and convert to a byte frame if audiofd handle frame exit block frame long long memmove frame if if memcmp fprintf stderr sv memcmp exit endif take byte frame and convert to sample and play if audiofd handle frame exit handle cut here 