from dejesu cavalier subject help need hello i hope somebody out here can help me i be currently work on a project where i be try to communicate from an ibm with phoenix bio use c to a board that i make with an intel cpu with uart chip the board work fine with the transmit command and terminal emulation mode of kermit but there seem to be something wrong with the initialization or protocol use when i try c i need to acces the unit i build use c because i have a sizable chunk of c code that i will be use to perform calculation and operation that will be very difficult to code in assembly language for the i have include the assembly code that i be run and the c code that i be try to use if anyone can show me something that i be do blatantly incorrectly or that i be miss because of my lack of knowledge about serial communication please e-mail me i write the assembly language to wait for a character to be receive and then to check it against the character if a be receive the led will indicate thi two c program that i have write do nothing but set up com port and send the character one use the bioscom function in the other use the software interrupt function in i have triple check the baud rate the parity none the stop bite the character length bite and the interrupt call for currently i be at a los a to what may be wrong any hardware guru out there want to comment thank alot hubert de jesu dejesu intel asm command equ command register on portum equ port a on timerlo equ high bite of timer timerhi equ low bite of timer uartdatum equ uart datum register uartcmd equ uart command register org sram location mvus set low timer bit stum timerlo mvus set high timer bit stum timerhi mvus start timer enable port a stum command mvus display on led stum portum mvus clear uart command stum uartcmd stum uartcmd stum uartcmd mvus internally reset uart stum uartcmd lda uartdatum remove extraneou datum mvus init uart for datum bite stum uartcmd no parity stop bite async mvus enable transmit and receive stum uartcmd init lda uartcmd read statu register ani is rxrdy jz init no loop lda uartdatum read datum character cpus is character jnz init no loop mvus character receive stum portum display on led hlt end c use bioscom include include include define init define send define receive define statu define void main char abyte abyte bioscom init abyte printf initialized comm port while bioscom statu abyte bioscom send abyte printf sent start c use include include include include main union reg register register register printf register register printf sent start 